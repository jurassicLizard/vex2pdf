//! Vulnerability information according to the CycloneDX specification.
//!
//! This module provides data structures representing security vulnerabilities
//! and their associated metadata.


use super::*;
use source::Source;
use vulnerability_reference::VulnerabilityReference;
use vulnerability_rating::VulnerabilityRating;
use advisory::Advisory;
use credits::Credits;
use vulnerability_analysis::VulnerabilityAnalysis;
use affects::Affects;
use property::Property;
use vex_status::VexStatus;

/// Represents a security vulnerability according to the CycloneDX specification.
///
/// Contains comprehensive information about a vulnerability including identifiers,
/// severity ratings, remediation advice, and status.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Vulnerability {
    pub id: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub source: Option<Source>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<VexStatus>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub references: Option<Vec<VulnerabilityReference>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub ratings: Option<Vec<VulnerabilityRating>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub cwes: Option<Vec<i32>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub detail: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub recommendation: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub advisories: Option<Vec<Advisory>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub published: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub updated: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub credits: Option<Credits>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub analysis: Option<VulnerabilityAnalysis>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub affects: Option<Vec<Affects>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<Vec<Property>>,
}